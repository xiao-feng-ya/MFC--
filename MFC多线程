在头文件
static UINT ThreadZ1(LPVOID* pParam);  //线程函数 ThreadZ1为线程函数名
CWinThread* ThreadXX1;  //线程名1


在源文件
ThreadXX1=AfxBeginThread((AFX_THREADPROC)ThreadZ1, this);//开启线程
ThreadXX1->SuspendThread();//   让线程等待
ThreadXX1->ResumeThread();//    唤醒暂停的线程
TerminateThread(ThreadXX1->m_hThread, 0);    //结束线程

//线程函数
//写法1，用TerminateThread(ThreadXX1->m_hThread, 0);    //结束线程
//线程函数只写工作事件
UINT CcsDlg::ThreadZ1(LPVOID* pParam)
{
	while(TRUE)
	{
		i++;
		Sleep(1000);
	}
	return 0;
}

//写法2  推荐写法
int n = 0;
CString strn;
BOOL ThreadKill = FALSE;//用于线程注销
UINT CThreadDlg::线程函数名(LPVOID* pParam)
{
	CThreadDlg* ap1 = (CThreadDlg*)pParam;//获取主类指针，在多线程类中使用主类变量需要使用指针ap1->
	while (1)
	{
		if (ThreadKill)
		{
			DWORD dwExitCode;//指定线程的退出代码
			GetExitCodeThread(ap1->Thread1, &dwExitCode);//获取线程1的退出代码
			AfxEndThread(dwExitCode, TRUE);//退出线程
		}
		else
		{       //线程的工作事件
			n++;
			strn.Format(_T("%d"), n);
			ap1->SetDlgItemText(IDC_EDIT1, strn);
			Sleep(30);
		}
	}	return 0;
}
线程关闭方法https://blog.csdn.net/u010246665/article/details/51115417

//判断线程是否开启
//只有开启过该线程，才能判断线程状态
DWORD code;//指定线程的退出代码
GetExitCodeThread(XX1->m_hThread, &code);//获取线程1的退出代码
if (code == STILL_ACTIVE) {
    //线程仍在执行
		MessageBox(_T("开"));
	}
else {
		MessageBox(_T("关"));
		//线程停止执行,结束线程
	}
	
MFC中的临界区类
MFC把上面的操作封装成一个类CCriticalSection,使用函数Lock与Unlock表示进入和离开临界区.上锁和解锁的说法是更符合我们的习惯思维的.

#include "afxmt.h" //需要添加该头文件引用
头文件加
CCriticalSection g_criSection;
源文件加
g_criSection.Lock()//给所有使用的资源上锁
g_criSection.Unlock(); //给使用的资源解锁
例如
UINT CThreadDlg::MyThread2(LPVOID* pParam)
{
	CThreadDlg* ap2 = (CThreadDlg*)pParam;//获取主类指针，在多线程类中使用主类变量需要使用指针ap1->
	while (1)
	{
		if (ThreadKill)
		{
			DWORD dwExitCode;//指定线程的退出代码
			GetExitCodeThread(ap2->Thread2, &dwExitCode);//获取线程1的退出代码
			AfxEndThread(dwExitCode, TRUE);//退出线程
		}
		else
		{
			ap2->g_criSection.Lock();//给所有使用的资源上锁
			//n++;
			strn.Format(_T("%d"), 2*n);
			strn += "T";
			ap2->SetDlgItemText(IDC_EDIT_2, strn);	
			if (n % 2 == 1)
			{
				n++;
			}
			ap2->g_criSection.Unlock(); //给使用的资源解锁
			Sleep(30);
			//break;
		}
	}	return 0;
}

互斥对象在MFC中通过CMutex类进行表述。使用CMutex类的方法非常简单，在构造CMutex类对象的同时可以指明待查询的互斥对象的名字，
在构造函数返回后即可访问此互斥变量。
CMutex类也是只含有构造函数这唯一的成员函数，当完成对互斥对象保护资源的访问后，
可通过调用从父类CSyncObject继承的UnLock（）函数完成对互斥对象的释放。CMutex类构造函数原型为：
CMutex( BOOL bInitiallyOwn = FALSE, LPCTSTR lpszName = NULL,LPSECURITY_ATTRIBUTES lpsaAttribute = NULL );
 
 CMutex global_Mutex(0,0,0); 
 锁和解，和临界区一样的函数，一样的用法。
　1．互斥量与临界区的作用非常相似，但互斥量是可以命名的，也就是说它可以跨越进程使用。
 所以创建互斥量需要的资源更多，所以如果只为了在进程内部是用的话使用临界区会带来速度上的优势并能够减少资源占用量。
 因为互斥量是跨进程的互斥量一旦被创建，就可以通过名字打开它。
 2．互斥量（Mutex），信号灯（Semaphore），事件（Event）都可以被跨越进程使用来进行同步数据操作，而其他的对象与数据同步操作无关，
  但对于进程和线程来讲，如果进程和线程在运行状态则为无信号状态，在退出后为有信号状态。
  所以可以使用WaitForSingleObject来等待进程和线程退出。 
　3．通过互斥量可以指定资源被独占的方式使用，但如果有下面一种情况通过互斥量就无法处理，
  比如现在一位用户购买了一份三个并发访问许可的数据库系统，可以根据用户购买的访问许可数量来决定有多少个线程/进程能同时进行数据库操作，
  这时候如果利用互斥量就没有办法完成这个要求，信号灯对象可以说是一种资源计数器。 
信号灯
前面讲的三种保持线程同步的方法是临界区,事件,互斥.它们都有点类似,就是确保一次只有一个线程访问资源,独占一个资源.

而信号量就与它们不同,它是可以让很多线程同时访问一个资源,但是限制一次同时访问的数量.这样的资源一般是只读,所以不会造成资源的混乱.
最简单的例子就是数据库中表的读操作,可以多个线程同时去读.而写可不行(只能一次让一个去写).
MFC中的semphore类  //使用方式和互斥锁和临界区相似
CSemaphore g_cSHE(2,2);//如果再多加一个线程有可能出错,也可能不.假如恰好三个线程同时访问就出错,如果前面的某个已经访问完了那不会出错
g_cSHE.Lock();
CString info = szInfo;
g_cSHE.Unlock();

